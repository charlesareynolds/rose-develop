*************************************
* Instructions to compile and install
*************************************

* Mandatory environment :

        LLVM 3.6
        Adding "--with-llvm=$(LLVM_PATH)" into ROSE configuration


*************************
* Notes on the translator
*************************

rose2llvm is a compiler that translates C intput code into LLVM  bytecode (.bc). The translator
covers most of the C 99 language, including all declarations and executable statements. One known
restriction is that it does not support long double constants.

Although the translator is almost complete, it requires more testing to be robust. I ran
into a number of semantic problems in the Rose representation of which I will give some examples.
As I encountered them, I fixed them. However, I have no way of knowing if I have fixed everything that
could come up as my testing most likely did not cover all possible combinations of program structures
that can cause problems. 

As an example, one piece of information that is returned incorrectly from the ROSE front-end is the
alignment value associated with variables. Rose usually returns -1 instead of the correct value. I
wrote code in the translator to recompute the alignment information.

Another example is that Rose inconsistently handles integer promotions. Sometimes no casting is 
provided at all to make sure that the two operands of a binary expression have the same size. In
one particular case, an unnecessary cast was added that caused a misrepresentation of the code.
Consider the following example of a boolean binary expression:

    if (sizeof(void *) == 8)

Rose tagged the left subexpression, sizeof(void *), with the type "unsigned int" and it added an
explicit cast of the right subexpression, the constant integer 8, into a "long int".

For the integer binary expression:

    if (sizeof(void *) + 8)

Rose also tagged the left and right subexpressions the same way as it did in the boolean case and
tagged the result as an "unsigned int" just like the left subexpression.

In order to generate the proper LLVM code for binary expressions, I had to partially redo the semantic
analysis to make sure that the operand types as well as the result type were compatible.

